// <auto-generated/>

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
namespace WeUtilities
{
    public enum FilterOperator
    {
        EQ,
        NEQ,
        LT,
        GT,
        LTE,
        GTE,
        START_WITH,
        END_WITH,
        LIKE

    }
    public static class QueryableExtensions
    {
        private static IQueryable<T> FilterInt16<T>(
    this IQueryable<T> qList,
    Expression<Func<T, short>> property,
    FilterOperator @operator,
    short filterQuery)
     => @operator switch
     {
         FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
         FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
         FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
         FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
         FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
         FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
         _ => qList
     };
        private static IQueryable<T> FilterInt32<T>(
           this IQueryable<T> qList,
           Expression<Func<T, int>> property,
           FilterOperator @operator,
           int filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterInt64<T>(
           this IQueryable<T> qList,
           Expression<Func<T, long>> property,
           FilterOperator @operator,
           long filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterUInt16<T>(
           this IQueryable<T> qList,
           Expression<Func<T, ushort>> property,
           FilterOperator @operator,
           ushort filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterUInt32<T>(
           this IQueryable<T> qList,
           Expression<Func<T, uint>> property,
           FilterOperator @operator,
           uint filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterUInt64<T>(
           this IQueryable<T> qList,
           Expression<Func<T, ulong>> property,
           FilterOperator @operator,
           ulong filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterDecimal<T>(
           this IQueryable<T> qList,
           Expression<Func<T, decimal>> property,
           FilterOperator @operator,
           decimal filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterDouble<T>(
           this IQueryable<T> qList,
           Expression<Func<T, double>> property,
           FilterOperator @operator,
           double filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterSingle<T>(
           this IQueryable<T> qList,
           Expression<Func<T, float>> property,
           FilterOperator @operator,
           float filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.LT => qList.Where(TranslateFilter(property, c => c < filterQuery)),
                FilterOperator.GT => qList.Where(TranslateFilter(property, c => c > filterQuery)),
                FilterOperator.LTE => qList.Where(TranslateFilter(property, c => c <= filterQuery)),
                FilterOperator.GTE => qList.Where(TranslateFilter(property, c => c >= filterQuery)),
                _ => qList
            };
        private static IQueryable<T> FilterString<T>(
           this IQueryable<T> qList,
           Expression<Func<T, string>> property,
           FilterOperator @operator,
           string filterQuery)
            => @operator switch
            {
                FilterOperator.EQ => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.NEQ => qList.Where(TranslateFilter(property, c => c != filterQuery)),
                FilterOperator.START_WITH => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.END_WITH => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                FilterOperator.LIKE => qList.Where(TranslateFilter(property, c => c == filterQuery)),
                _ => qList
            };

        public static IQueryable<T> Filter<T, TPROP>(
       this IQueryable<T> qList,
       Expression<Func<T, TPROP>> property,
       FilterOperator @operator,
       TPROP filterQuery)
        {


            var propertyInfo = HelperClass<T>.Property(property);
            var is_numeric = propertyInfo.PropertyType.IsNumeric();
            var is_string = propertyInfo.PropertyType.IsString();


            if (filterQuery == null)
                return qList;


            var filter = filterQuery.ToString();

            if (is_numeric)
            {
                if (Int16.TryParse(filter, out short res1))
                    return qList.FilterInt16<T>(property as Expression<Func<T, short>>, @operator, res1);
                if (Int32.TryParse(filter, out int res2))
                    return qList.FilterInt32<T>(property as Expression<Func<T, int>>, @operator, res2);
                if (Int64.TryParse(filter, out long res3))
                    return qList.FilterInt64<T>(property as Expression<Func<T, long>>, @operator, res3);
                if (UInt16.TryParse(filter, out ushort res4))
                    return qList.FilterUInt16<T>(property as Expression<Func<T, ushort>>, @operator, res4);
                if (UInt32.TryParse(filter, out uint res5))
                    return qList.FilterUInt32<T>(property as Expression<Func<T, uint>>, @operator, res5);
                if (UInt64.TryParse(filter, out ulong res6))
                    return qList.FilterUInt64<T>(property as Expression<Func<T, ulong>>, @operator, res6);
                if (Decimal.TryParse(filter, out decimal res7))
                    return qList.FilterDecimal<T>(property as Expression<Func<T, decimal>>, @operator, res7);
                if (Double.TryParse(filter, out double res8))
                    return qList.FilterDouble<T>(property as Expression<Func<T, double>>, @operator, res8);
                if (Single.TryParse(filter, out float res9))
                    return qList.FilterSingle<T>(property as Expression<Func<T, float>>, @operator, res9);
            }
            else if (is_string)
            {
                return qList.FilterString<T>(property as Expression<Func<T, string>>, @operator, filter);
            }
            return qList;
        }

        private static Expression<Func<TEntity, bool>> TranslateFilter<TEntity, TProperty>(
         Expression<Func<TEntity, TProperty>> prop,
         Expression<Func<TProperty, bool>> filter)
        {
            var newFilterExpression = new Visitor<TEntity>(prop).Visit(filter);
            return (Expression<Func<TEntity, bool>>)newFilterExpression;
        }

        private class Visitor<TEntity> : ExpressionVisitor
        {
            private readonly ParameterExpression _parameter;
            private readonly Expression _body;
            public Visitor(LambdaExpression prop)
            {
                _parameter = prop.Parameters[0];
                _body = prop.Body;
            }

            // return the body of the property expression any time we encounter
            // the parameter expression of the filter expression
            protected override Expression VisitParameter(ParameterExpression node) => _body;

            public override Expression Visit(Expression node)
            {
                if (node is LambdaExpression lamda)
                {
                    // Visit the body of the filter lambda, replacing references to the string 
                    // parameter with the body of the property expression
                    var newBody = this.Visit(lamda.Body);

                    // construct a new lambda expression with the new body and the original parameter
                    return Expression.Lambda<Func<TEntity, bool>>(newBody, _parameter);
                }
                return base.Visit(node);
            }
        }

        private static bool IsNumeric(this Type type)
        => Type.GetTypeCode(type) switch
        {
            TypeCode.Int16 or TypeCode.Int32 or
            TypeCode.UInt16 or TypeCode.UInt32 or TypeCode.UInt64 or
            TypeCode.Decimal or TypeCode.Double or TypeCode.Single => true,
            _ => false
        };

        private static bool IsString(this Type type)
        => Type.GetTypeCode(type) switch
        {
            TypeCode.String => true,
            _ => false
        };

        private static bool IsDateTime(this Type type)
        => Type.GetTypeCode(type) switch
        {
            TypeCode.DateTime => true,
            _ => false
        };
    }
    
   
}

